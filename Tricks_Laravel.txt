------------- create laravel project-------------
composer create-project laravel/laravel example-app (laravel8)
if we want to specific version
composer create-project --prefer-dist laravel/laravel blog "6.*" <- can put version here
-------------------------------------------------------

<x- component file name/>;   (to use component file)
@include ('view file name');   (to include file view in view)
------------------------------------- How to create 404 page in laravel -----------------------------------------
You need to create blade views for error pages, move to this path resources/views/ inside here create errors 
folder and within the directory create 404.blade.php file. It will redirect you to the 404 page if you donâ€™t 
find the associated URL.
Include the following code in resources/views/errors/404.blade.php error file.
-------------------------
to show all error
@if ($errors->any())
    <div class="alert alert-danger">
        <strong>Whoops!</strong> There were some problems with your input.<br><br>
        <ul>
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif
----------------------------------------------------------------------
date format
{{date('F d, Y', strtotime($detail->created_at->setTimezone('Asia/Phnom_Penh')))}} at {{date('g:i A ', strtotime($detail->created_at->setTimezone('Asia/Phnom_Penh')))}}<br> {{$detail->created_at->diffForHumans()}}
{{$info->created_at->format('F j Y')}} jan 1 2021
{{$info->updated_at->diffForHumans()}} 1 min ago

-------------------------validation rule--------------------------------------
# <values> = foo,bar,...
# <field> = array field
# <characters> = amount of characters

# accepted					           # active_url
# after:<tomorrow>			           # after_or_equal:<tomorrow>
# alpha						           # alpha_dash
# alpha_num					           # array
# bail 					               # before:<today>
# before_or_equal:<today>              # between:min,max
# boolean					           # confirmed
# date						           # date_equals:<today>
# date_format:<format> 		           # different:<name>
# digits:<value>			           # digits_between:min,max
# dimensions:<min/max_with>	           # distinct
# email						           # ends_with:<values>
# exclude_if:<field>,<value>           # exclude_unless:<field>,<value>
# exists:<table>,<column>	           # file
# filled					           # gt:<field>
# gte:<field>				           # image
# in:<values>				           # in_array:<field>
# integer					           # ip
# ipv4                                 # ipv6  
# json						           # lt:<field>
# lte:<field>       		           # max:<value>
# mimetypes:video/avi,...	           # mimes:jpeg,bmp,png
# min:<value>				           # not_in:<values>
# not_regex:<pattern> 		           # nullable
# numeric					           # password:<auth guard>
# present					           # regex:<pattern>
# required					           # required_if:<field>,<value>
# required_unless:<field>,<value>      # required_with:<fields>
# required_with_all:<fields>	       # required_without:<fields>
# required_without_all:<fields>        # same:<field>
# size:<characters>			           # starts_with:<values>
# string						       # timezone
# unique:table,column
# uuid
'email' => 'required|string|email|max:255|unique:users,email,'.$data->id,
'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048|dimensions:max_width=500,max_height=500',
------------------------validation password rule---------------------------
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rules\Password;

'password' => ['required','same:re_password', Password::min(8)->letters()->mixedCase()->numbers()->symbols()->uncompromised()],
're_password'=>'required',
..................... custom closure validation check old password--------------------
$admin = Admin::find($id);
$validate = $req->validate([
     	'old_password' => [
                             'required', function ($attribute, $value, $fail) use ($admin){
                                            	if ($value != $admin->password) {
                                                    return $fail($attribute.'didn\'t match');
                                                }
                                            },
                          ],
        ]);
-----------------------------------how to create----------------------------------------
php artisan make:controller PhotoController --resource --model=Photo
-----------------------------create resource controller----------------------------
php artisan make:controller name -r
---------------------------------migration------------------------------------------
php artisan make:migration create_flights_table
-----------------------------paginator---------------------------------------
	$data = Category::orderBy('id','asc')->paginate(5);  'asc' 'desc'
        return view('admin.category.index',['data'=>$data]);
in view file 
	{{$data->links()}}
in app/Providers/AppServiceProvider.php
	use Illuminate\Pagination\Paginator;
	public function boot(){
        	Paginator::useBootstrap();
    				}

--------------------how to get old value select option--------------------------
<option value="{{$item->id}}" {{(old('category')==$item->id)? 'selected':''}}>{{$item->title}}</option>

------------------ search like -----------------------------------------------------------------
$post = Post::where('title','like','%'.$search.'%')->orderBy('id','DESC')->paginate(2);

------------------how session in view--------------k
 @if (session('status'))  or Session::has('staus')
     {{ session('status') }} or Session::get('staus')
 @endif

------------------- date() -------------------------
{{date('F d, Y', strtotime($item->created_at->setTimezone('Asia/Phnom_Penh')))}} at {{date('g:i A ', strtotime($item->created_at->setTimezone('Asia/Phnom_Penh')))}}<br> {{$item->created_at->diffForHumans()}}

---------------at column to table by command-----------------
php artisan migrate:make add_new collumn_to_the table

----------------------- how to prevent back button after login and logout laravel----------
1.php artisan make:middleware PreventBackHistory then add this into function
	$response = $next($request);
        return $response->header('Cache-Control','nocache, no-store, max-age=0, must-revalidate')
                        ->header('Pragma','no-cache')
                        ->header('Expires','Sun, 02 Jan 1990 00:00:00 GMT');
2.go to Kernel.php and add this to route middleware
'PreventBackHistory' => \App\Http\Middleware\PreventBackHistory::class,
3.in web.php
Route::group(['middleware'=>'PreventBackHistory'],function(){
	add all route that u want to prevent
});

-------------------------share data or data table to all view or specific view-------------
View::share and View::composter
1.go to app/Prodiver/ServiceProvider.php
2.in boot method just add something like:
fucntion boot(){
	View::share('varName',data); use all view can not specific one
	Ex:View::share('post',App\Models\Post::orderBy.......);
	or
	View::composer('fileName or *',data); * mean that share to all view fileName mean share to only in that file

}
------------one way we use this below function in route view
  this is how to share data to all view blade
 View::composer(['*'],function($view){ // '*' mean that we can share data to all view but if we want to specific view we can ['admin.category','home',...] mean file name
    $user = Auth::user();  //we can share data table as well
    $view->with('USER',$user);  //USER is variable we use all view
	});
--------------------------- Install laravel 8 Auth command------------------------------------
composer require laravel/ui

php artisan ui vue --auth
  
npm install && npm run dev
php artisan ui bootstrap --auth

----------------------------- detect user is online or not larave 7,8 ----------------------------
1, php artisan make:middleware LastSeenUserActivity
2, <?php
namespace App\Http\Middleware;
use Closure;
use App\Models\User;
use Auth;
use Cache;
use Carbon\Carbon;
class LastSeenUserActivity{
/**
* Handle an incoming request.
*
* @param \Illuminate\Http\Request $request
* @param \Closure $next
* @return mixed
*/
public function handle($request, Closure $next){
	if (Auth::check()) {
	$expireTime = Carbon::now()->addMinute(1); // keep online for 1 min
	Cache::put('user-is-online-'.Auth::user()->id, true, $expireTime);
	//Last Seen
	User::where('id', Auth::user()->id)->update(['last_seen' => Carbon::now()]);
}
	return $next($request);
	}
}
3,go to kernel.php and add this to middleware group
\App\Http\Middleware\LastSeenUserActivity::class,
4,add this to User model
public function isOnline()
{
    return Cache::has('user-is-online-' . $this->id);
}
5,in view file
@foreach($users as $user)
@if($user->isOnline())
    user is online!!
@endif
@endforeach

Note**** if we don't add isOnline() to User model so in view file going to be like:
@if(Cache::has('user-is-online-' . $user->id))
Online
@endif
------------------create model migration and resource controller by cmd -------------------
php artisan make:model Todo -mcr (all together migra.recontro)
php artisan make:controller CustomersController --model=Customer (con.model)
php artisan make:controller CustomersController --resource (recontrl)
----------------------compile sass in laravel----------------------
goto webpack.min.js then add this

mix.js('resources/js/app.js', 'public/js')
    .sass('resources/sass/app.scss', 'public/css');
now run commad
npm install
npm run watch
-------------------------insitall font awesome-------------------
npm install font-awesome
in scss file
@import '~font-awesome/scss/font-awesome';

--------------DB builder join 2 table---------------
$userId = Session::get('userLogin')['id'];
        $cart = DB::table('carts')
                ->join('products','carts.product_id','=','products.id')
                ->where('carts.user_id',$userId)
                ->select('products.*')
                ->get();
        return view('cartlist',['cartlists'=>$cart]);


-------------------how to instal Authentication laravel project---
1.create project
composer create-project --prefer-dist laravel/laravel blog
2.run commands
composer require laravel/ui
php artisan ui vue --auth (for scaffolding out the auth views)
(php artisan ui bootstrap --auth run this command instead if u want auth with bootstrap)



